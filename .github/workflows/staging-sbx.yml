name: STG SBX (build → push → deploy backend → health → promote tag)

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  APP_DIR: apps/backend
  REGISTRY: ghcr.io

jobs:
  build_and_push:
    if: github.ref_name == 'restructure/monorepo'
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.meta.outputs.TAG }}
      IMAGE_B: ${{ steps.meta.outputs.IMAGE_B }}
      IMAGE_B_PROD: ${{ steps.meta.outputs.IMAGE_B_PROD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image names and tag
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          DATE=$(date +%d_%m_%Y)
          VRAW=$(awk -v n="$GITHUB_RUN_NUMBER" 'BEGIN{printf "%.1f", n/10}')
          VERSION="v${VRAW}"
          BRANCH_SAFE="${GITHUB_REF_NAME//\//-}"

          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          OWNER_LC=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')
          REPO_LC=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')

          TAG="${DATE}_${VERSION}_${BRANCH_SAFE}"
          IMAGE_B="${REGISTRY}/${OWNER_LC}/${REPO_LC}-backend:${TAG}"
          IMAGE_B_PROD="${REGISTRY}/${OWNER_LC}/${REPO_LC}-backend:prod-candidate_${TAG}"

          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          echo "IMAGE_B=$IMAGE_B" >> "$GITHUB_OUTPUT"
          echo "IMAGE_B_PROD=$IMAGE_B_PROD" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR (runner)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push backend image
        working-directory: ${{ env.APP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          docker buildx create --use --name xbuilder || docker buildx use xbuilder
          docker buildx build -f Dockerfile -t "${{ steps.meta.outputs.IMAGE_B }}" --push .

      - name: Promote to prod-candidate tag (registry only; no deploy)
        shell: bash
        run: |
          set -euo pipefail
          docker pull "${{ steps.meta.outputs.IMAGE_B }}"
          docker tag  "${{ steps.meta.outputs.IMAGE_B }}" "${{ steps.meta.outputs.IMAGE_B_PROD }}"
          docker push "${{ steps.meta.outputs.IMAGE_B_PROD }}"

  deploy_to_staging:
    if: github.ref_name == 'restructure/monorepo'
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: Staging

    steps:
      - name: Write SSH key (STAGING_SSH_KEY)
        shell: bash
        run: |
          set -euo pipefail
          umask 077
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Add host to known_hosts (STAGING_SSH_HOST)
        shell: bash
        run: |
          set -euo pipefail
          ssh-keyscan -H "${{ secrets.STAGING_SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Set variables
        id: vars
        shell: bash
        env:
          IMAGE_B: ${{ needs.build_and_push.outputs.IMAGE_B }}
          TAG:     ${{ needs.build_and_push.outputs.TAG }}
        run: |
          set -euo pipefail
          echo "HOST=${{ secrets.STAGING_SSH_HOST }}" >> "$GITHUB_OUTPUT"
          echo "USER=${{ secrets.STAGING_SSH_USER }}" >> "$GITHUB_OUTPUT"
          echo "IMAGE_B=${IMAGE_B}" >> "$GITHUB_OUTPUT"
          echo "TAG=${TAG}" >> "$GITHUB_OUTPUT"
          echo "NAME=stgContainer_${TAG}" >> "$GITHUB_OUTPUT"

      - name: Resolve GHCR credentials for remote VM
        id: ghcr
        shell: bash
        env:
          PREFERRED_USER: ${{ secrets.STAGING_GHCR_USER }}
          PREFERRED_PAT:  ${{ secrets.STAGING_GHCR_PAT }}
          FALLBACK_PAT:   ${{ secrets.GHCR_PAT }}
          ACTOR:          ${{ github.actor }}
        run: |
          set -euo pipefail
          CR_USER="$PREFERRED_USER"
          if [ -z "$CR_USER" ]; then CR_USER="$ACTOR"; fi
          CR_PAT="$PREFERRED_PAT"
          if [ -z "$CR_PAT" ]; then CR_PAT="$FALLBACK_PAT"; fi
          if [ -z "$CR_PAT" ]; then
            echo "Missing GHCR token for REMOTE VM (add STAGING_GHCR_PAT or GHCR_PAT in Staging env)" >&2
            exit 1
          fi
          echo "CR_USER=$CR_USER" >> "$GITHUB_OUTPUT"
          echo "CR_PAT=$CR_PAT"   >> "$GITHUB_OUTPUT"

      - name: Docker login on remote
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "${{ steps.vars.outputs.USER }}@${{ steps.vars.outputs.HOST }}" \
            "echo '${{ steps.ghcr.outputs.CR_PAT }}' | docker login ghcr.io -u '${{ steps.ghcr.outputs.CR_USER }}' --password-stdin"

      - name: Pull image on remote
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "${{ steps.vars.outputs.USER }}@${{ steps.vars.outputs.HOST }}" \
            "docker pull '${{ steps.vars.outputs.IMAGE_B }}'"

      - name: Stop old container (if any)
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "${{ steps.vars.outputs.USER }}@${{ steps.vars.outputs.HOST }}" \
            "docker rm -f '${{ steps.vars.outputs.NAME }}' 2>/dev/null || true"

      - name: Run new container (host 3001 → container 3000)
        shell: bash
        env:
          DB_HOST: ${{ secrets.DB_HOST_STAGING }}
          DB_PORT: ${{ secrets.DB_PORT_STAGING }}
          DB_USER: ${{ secrets.DB_USER_STAGING }}
          DB_PASS: ${{ secrets.DB_PASSWORD_STAGING }}
          DB_NAME: ${{ secrets.DB_NAME_STAGING }}
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "${{ steps.vars.outputs.USER }}@${{ steps.vars.outputs.HOST }}" \
            "docker run -d --name '${{ steps.vars.outputs.NAME }}' \
              -e DB_HOST='${DB_HOST}' \
              -e DB_PORT='${DB_PORT}' \
              -e DB_USER='${DB_USER}' \
              -e DB_PASSWORD='${DB_PASS}' \
              -e DB_NAME='${DB_NAME}' \
              -e PORT='3000' \
              -p 3001:3000 \
              '${{ steps.vars.outputs.IMAGE_B }}'"

      - name: Health check /api/health on remote (port 3001)
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "${{ steps.vars.outputs.USER }}@${{ steps.vars.outputs.HOST }}" \
            "for i in {1..60}; do \
               if curl -fsS 'http://127.0.0.1:3001/api/health' >/dev/null 2>&1; then \
                 echo '✅ Staging health OK'; exit 0; \
               fi; \
               sleep 2; \
             done; \
             echo '❌ Staging health failed. Recent logs:'; \
             docker logs --tail=200 '${{ steps.vars.outputs.NAME }}' || true; \
             exit 1"
