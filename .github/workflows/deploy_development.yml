name: Deploy (Development)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (sha7 or 'latest')"
        required: true
        default: "latest"
      color:
        description: "Which color to deploy to?"
        required: true
        default: "blue"
        type: choice
        options: ["blue", "green"]
      switch_traffic:
        description: "Switch the proxy to the chosen color after deployment?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Development
    concurrency:
      group: deploy-development
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}
          args: --timeout=2m --accept-routes

      - name: Set deployment secrets
        run: |
          if [ "${{ inputs.color }}" = "blue" ]; then
            echo "HOST=${{ secrets.APP_BLUE_SSH_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.APP_BLUE_SSH_USER }}" >> $GITHUB_ENV
            echo "KEY=${{ secrets.APP_BLUE_SSH_KEY }}" >> $GITHUB_ENV
          else
            echo "HOST=${{ secrets.APP_GREEN_SSH_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.APP_GREEN_SSH_USER }}" >> $GITHUB_ENV
            echo "KEY=${{ secrets.APP_GREEN_SSH_KEY }}" >> $GITHUB_ENV
          fi

      - name: Deploy to selected color
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          key: ${{ env.KEY }}
          script_stop: true
          script: |
            set -e
            STACK=myapp_${{ inputs.color }}
            TAG="${{ inputs.tag }}"
            REPO="${{ github.repository }}"

            mkdir -p ~/app/$STACK
            cd ~/app/$STACK

            cat > .env <<EOF
            TAG=$TAG
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            EOF

            cat > docker-compose.yml <<YAML
            services:
              frontend:
                image: ghcr.io/${REPO}-frontend:${TAG:-latest}
                ports:
                  - "80:80"
                depends_on: [backend]

              backend:
                image: ghcr.io/${REPO}-backend:${TAG:-latest}
                environment:
                  DB_HOST: \${DB_HOST}
                  DB_PORT: \${DB_PORT}
                  DB_USER: \${DB_USER}
                  DB_PASSWORD: \${DB_PASSWORD}
                  DB_NAME: \${DB_NAME}
                ports:
                  - "3000:3000"
                healthcheck:
                  test: ["CMD", "node", "-e", "fetch('http://localhost:3000/api/health').then(r=>{if(r.ok)process.exit(0);else process.exit(1)}).catch(()=>process.exit(1))"]
                  interval: 15s
                  timeout: 5s
                  retries: 5
            YAML

            docker compose --env-file .env pull
            docker compose --env-file .env up -d --remove-orphans
            sleep 3
            curl -fsS http://localhost/api/health || (docker compose logs --no-color --tail=200; exit 1)

      - name: Switch proxy to selected color
        if: ${{ inputs.switch_traffic == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROXY_SSH_HOST }}
          username: ${{ secrets.PROXY_SSH_USER }}
          key: ${{ secrets.PROXY_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            COLOR=${{ inputs.color }}
            sudo ln -sfn /etc/nginx/upstreams/$COLOR.conf /etc/nginx/upstreams/active.conf
            sudo nginx -t
            sudo systemctl reload nginx
            curl -fsS http://localhost/api/health || (echo "Proxy smoke test failed" && exit 1)
