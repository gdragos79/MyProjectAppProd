name: Deploy (Development)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (sha7 or 'latest')"
        required: true
        default: "latest"
      color:
        description: "Which color to deploy to?"
        required: true
        default: "blue"
        type: choice
        options: ["blue", "green"]
      switch_traffic:
        description: "Also switch the proxy to this color?"
        required: true
        default: "false"
        type: choice
        options: ["false", "true"]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Development
    concurrency:
      group: deploy-development
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      # 1) Validate Tailscale OAuth secrets are present and well-formed
      - name: Validate Tailscale OAuth secrets
        shell: bash
        env:
          TS_ID:     ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_SECRET: ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
        run: |
          if [ -z "$TS_ID" ]; then echo "Missing TS_OAUTH_CLIENT_ID in Environment: Development" >&2; exit 1; fi
          if [ -z "$TS_SECRET" ]; then echo "Missing TS_OAUTH_CLIENT_SECRET in Environment: Development" >&2; exit 1; fi
          case "$TS_ID" in tskey-client-*) : ;; *) echo "TS_OAUTH_CLIENT_ID should start with 'tskey-client-'" >&2; exit 1 ;; esac
          case "$TS_SECRET" in tskey-secret-*) : ;; *) echo "TS_OAUTH_CLIENT_SECRET should start with 'tskey-secret-'" >&2; exit 1 ;; esac
          echo "✅ Tailscale OAuth secrets look valid."

      # 2) Connect to Tailscale (OAuth primary)
      - name: Connect to Tailscale (OAuth)
        id: ts_oauth
        continue-on-error: true
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret:     ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
          args: --timeout=2m --accept-routes --accept-dns=true --hostname=gha-${{ github.run_id }}

      # 3) Fallback: Connect to Tailscale using an Ephemeral + Preauthorized auth key
      - name: Connect to Tailscale (AuthKey fallback)
        id: ts_auth
        if: ${{ steps.ts_oauth.outcome != 'success' }}
        continue-on-error: true
        uses: tailscale/github-action@v3
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}
          args: --timeout=2m --accept-routes --accept-dns=true --hostname=gha-${{ github.run_id }}

      - name: Ensure Tailscale is connected
        shell: bash
        run: |
          echo "OAuth outcome:  ${{ steps.ts_oauth.outcome }}"
          echo "AuthKey outcome: ${{ steps.ts_auth.outcome }}"
          if ! command -v tailscale >/dev/null 2>&1; then
            echo "❌ Tailscale CLI not found"; exit 1
          fi
          tailscale status || true
          if [[ "${{ steps.ts_oauth.outcome }}" != "success" && "${{ steps.ts_auth.outcome }}" != "success" ]]; then
            echo "❌ Could not connect to Tailscale via OAuth or AuthKey. Check secrets."; exit 1
          fi
          echo "✅ Connected to Tailscale."

      # 4) Preflight to BLUE/GREEN: ensure Docker + target dir (use explicit /home/<user> path)
      - name: Preflight (BLUE) — check Docker & prepare path
        if: ${{ inputs.color == 'blue' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.APP_BLUE_SSH_HOST }}     # Use the VM's Tailscale 100.x IP in this secret
          username: ${{ secrets.APP_BLUE_SSH_USER }}
          key:      ${{ secrets.APP_BLUE_SSH_KEY }}
          script_stop: true
          script: bash -lc 'set -e; echo "Connected to BLUE"; hostname; uname -a; docker --version || (echo "Docker not installed" && exit 1); mkdir -p /home/${{ secrets.APP_BLUE_SSH_USER }}/app/myapp_blue'

      - name: Preflight (GREEN) — check Docker & prepare path
        if: ${{ inputs.color == 'green' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.APP_GREEN_SSH_HOST }}    # Use the VM's Tailscale 100.x IP in this secret
          username: ${{ secrets.APP_GREEN_SSH_USER }}
          key:      ${{ secrets.APP_GREEN_SSH_KEY }}
          script_stop: true
          script: bash -lc 'set -e; echo "Connected to GREEN"; hostname; uname -a; docker --version || (echo "Docker not installed" && exit 1); mkdir -p /home/${{ secrets.APP_GREEN_SSH_USER }}/app/myapp_green'

      # 5) Render docker-compose.yml INSIDE the repo workspace (scp-action can see it)
      - name: Render docker-compose.yml
        run: |
          set -e
          mkdir -p deploy
          cat > deploy/docker-compose.yml <<'YAML'
          services:
            frontend:
              image: ghcr.io/${{ github.repository }}-frontend:${TAG:-latest}
              ports:
                - "80:80"
              depends_on:
                - backend
            backend:
              image: ghcr.io/${{ github.repository }}-backend:${TAG:-latest}
              environment:
                DB_HOST: ${DB_HOST}
                DB_PORT: ${DB_PORT}
                DB_USER: ${DB_USER}
                DB_PASSWORD: ${DB_PASSWORD}
                DB_NAME: ${DB_NAME}
              ports:
                - "3000:3000"
          YAML
          ls -l deploy/docker-compose.yml

      # 6) Upload compose to BLUE/GREEN via SCP (workspace path + 100.x host)
      - name: Upload compose to BLUE
        if: ${{ inputs.color == 'blue' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.APP_BLUE_SSH_HOST }}
          username: ${{ secrets.APP_BLUE_SSH_USER }}
          key:      ${{ secrets.APP_BLUE_SSH_KEY }}
          source:   "deploy/docker-compose.yml"
          target:   "/home/${{ secrets.APP_BLUE_SSH_USER }}/app/myapp_blue/"
          overwrite: true
          debug: true

      - name: Upload compose to GREEN
        if: ${{ inputs.color == 'green' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.APP_GREEN_SSH_HOST }}
          username: ${{ secrets.APP_GREEN_SSH_USER }}
          key:      ${{ secrets.APP_GREEN_SSH_KEY }}
          source:   "deploy/docker-compose.yml"
          target:   "/home/${{ secrets.APP_GREEN_SSH_USER }}/app/myapp_green/"
          overwrite: true
          debug: true

      # 7) Deploy to BLUE/GREEN using a single-line script (avoids YAML parser issues)
      - name: Deploy to BLUE
        if: ${{ inputs.color == 'blue' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.APP_BLUE_SSH_HOST }}
          username: ${{ secrets.APP_BLUE_SSH_USER }}
          key:      ${{ secrets.APP_BLUE_SSH_KEY }}
          script_stop: true
          command_timeout: 10m
          script: >
            bash -lc 'set -e; cd /home/${{ secrets.APP_BLUE_SSH_USER }}/app/myapp_blue;
            echo "TAG=${{ inputs.tag }}" > .env;
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env;
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env;
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env;
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env;
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env;
            docker compose --env-file .env pull;
            docker compose --env-file .env up -d --remove-orphans;
            sleep 3;
            if ! curl -fsS http://localhost/api/health; then docker compose logs --no-color --tail=200; exit 1; fi'

      - name: Deploy to GREEN
        if: ${{ inputs.color == 'green' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.APP_GREEN_SSH_HOST }}
          username: ${{ secrets.APP_GREEN_SSH_USER }}
          key:      ${{ secrets.APP_GREEN_SSH_KEY }}
          script_stop: true
          command_timeout: 10m
          script: >
            bash -lc 'set -e; cd /home/${{ secrets.APP_GREEN_SSH_USER }}/app/myapp_green;
            echo "TAG=${{ inputs.tag }}" > .env;
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env;
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env;
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env;
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env;
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env;
            docker compose --env-file .env pull;
            docker compose --env-file .env up -d --remove-orphans;
            sleep 3;
            if ! curl -fsS http://localhost/api/health; then docker compose logs --no-color --tail=200; exit 1; fi'

      # 8) Optionally switch the proxy to the selected color
      - name: Switch proxy to selected color
        if: ${{ inputs.switch_traffic == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.PROXY_SSH_HOST }}
          username: ${{ secrets.PROXY_SSH_USER }}
          key:      ${{ secrets.PROXY_SSH_KEY }}
          script_stop: true
          script: >
            bash -lc 'set -e; COLOR=${{ inputs.color }};
            sudo ln -sfn /etc/nginx/upstreams/$COLOR.conf /etc/nginx/upstreams/active.conf;
            sudo nginx -t;
            sudo systemctl reload nginx;
            curl -fsS http://localhost/api/health || (echo "Proxy smoke test failed" && exit 1)'
