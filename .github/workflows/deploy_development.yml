# This workflow deploys a chosen image tag to either the BLUE or GREEN app VM,
# then can (optionally) switch the external proxy to route traffic to that color.
#
# Required Environment secrets (set per Environment in GitHub → Settings → Environments):
# - APP_BLUE_SSH_HOST     : IP or hostname of BLUE App VM
# - APP_BLUE_SSH_USER     : SSH user on BLUE App VM
# - APP_BLUE_SSH_KEY      : Private key for BLUE App VM
# - APP_GREEN_SSH_HOST    : IP or hostname of GREEN App VM
# - APP_GREEN_SSH_USER    : SSH user on GREEN App VM
# - APP_GREEN_SSH_KEY     : Private key for GREEN App VM
# - PROXY_SSH_HOST        : IP or hostname of Proxy VM
# - PROXY_SSH_USER        : SSH user on Proxy VM (must be able to run sudo without password for nginx reload)
# - PROXY_SSH_KEY         : Private key for Proxy VM
# - DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME : Database connection for backend
#
# Notes:
# - The proxy is expected to use an Nginx config where a symlink controls the active upstream.
# - See deploy/proxy/nginx/sites-enabled/README-switch.txt in the starter pack for details.

name: Deploy (Development)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (sha7 or 'latest')"
        required: true
        default: "latest"
      color:
        description: "Which color to deploy to?"
        required: true
        default: "blue"
        type: choice
        options: ["blue", "green"]
      switch_traffic:
        description: "Switch the proxy to the chosen color after deployment?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Development
    concurrency:
      group: deploy-development
      cancel-in-progress: true
    steps:
      - name: Pick target host by color
        id: pick
        run: |
          if [ "${{ github.event.inputs.color }}" = "blue" ]; then
            echo "host=${{ secrets.APP_BLUE_SSH_HOST }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.APP_BLUE_SSH_USER }}" >> $GITHUB_OUTPUT
            echo "key=${{ secrets.APP_BLUE_SSH_KEY }}" >> $GITHUB_OUTPUT
            echo "stack=myapp_blue" >> $GITHUB_OUTPUT
          else
            echo "host=${{ secrets.APP_GREEN_SSH_HOST }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.APP_GREEN_SSH_USER }}" >> $GITHUB_OUTPUT
            echo "key=${{ secrets.APP_GREEN_SSH_KEY }}" >> $GITHUB_OUTPUT
            echo "stack=myapp_green" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to App VM (Docker Compose pull + up)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ steps.pick.outputs.host }}
          username: ${{ steps.pick.outputs.user }}
          key:      ${{ steps.pick.outputs.key }}
          script_stop: true
          script: |
            set -e
            mkdir -p ~/app/${{ steps.pick.outputs.stack }}
            cd ~/app/${{ steps.pick.outputs.stack }}

            # Create/update .env for Compose
            cat > .env <<'EOF'
            TAG=${{ github.event.inputs.tag }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            EOF

            # Create/update docker-compose.yml (production runtime)
            cat > docker-compose.yml <<'YAML'
            services:
              frontend:
                image: ghcr.io/${{ github.repository }}-frontend:${TAG:-latest}
                # In production, the frontend is static in Nginx. No env needed.
                ports:
                  - "80:80"
                depends_on:
                  - backend

              backend:
                image: ghcr.io/${{ github.repository }}-backend:${TAG:-latest}
                environment:
                  DB_HOST: ${DB_HOST}
                  DB_PORT: ${DB_PORT}
                  DB_USER: ${DB_USER}
                  DB_PASSWORD: ${DB_PASSWORD}
                  DB_NAME: ${DB_NAME}
                ports:
                  - "3000:3000"
                healthcheck:
                  test: ["CMD", "node", "-e", "fetch('http://localhost:3000/api/health').then(r=>{if(r.ok)process.exit(0);else process.exit(1)}).catch(()=>process.exit(1))"]
                  interval: 15s
                  timeout: 5s
                  retries: 5
            YAML

            docker compose --env-file .env pull
            docker compose --env-file .env up -d --remove-orphans
            sleep 3
            curl -fsS http://localhost/api/health || (docker compose logs --no-color --tail=200; exit 1)

      - name: (Optional) Switch external proxy to this color
        if: ${{ github.event.inputs.switch_traffic == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.PROXY_SSH_HOST }}
          username: ${{ secrets.PROXY_SSH_USER }}
          key:      ${{ secrets.PROXY_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            COLOR=${{ github.event.inputs.color }}
            sudo ln -sfn /etc/nginx/upstreams/$COLOR.conf /etc/nginx/upstreams/active.conf
            sudo nginx -t
            sudo systemctl reload nginx
            # Quick smoke check (adjust domain if needed)
            curl -fsS http://localhost/api/health || (echo "Proxy smoke test failed" && exit 1)
