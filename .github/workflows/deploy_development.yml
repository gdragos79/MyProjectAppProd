name: Deploy Development (Blue/Green)

on:
  workflow_dispatch:
    inputs:
      color:
        description: "Which color to deploy?"
        type: choice
        options:
          - blue
          - green
        default: green
      tag:
        description: "Docker tag to deploy (backend & frontend)"
        type: string
        default: latest
      flip_proxy:
        description: "Flip proxy to this color after successful deploy?"
        type: boolean
        default: false

concurrency:
  group: deploy-development
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Deploy to BLUE App VM
        if: ${{ inputs.color == 'blue' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.APP_BLUE_SSH_HOST }}
          username: ${{ secrets.APP_BLUE_SSH_USER }}
          key: ${{ secrets.APP_BLUE_SSH_KEY }}
          script_stop: true
        env:
          DEPLOY_TAG: ${{ inputs.tag }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        with:
          script: |
            set -euo pipefail
            mkdir -p ~/app && cd ~/app

            # Optional GHCR login (only if creds exist)
            if [ -n "${GHCR_USERNAME:-}" ] && [ -n "${GHCR_TOKEN:-}" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            fi

            # Vars for compose substitution
            export TAG="${DEPLOY_TAG}"
            export DB_HOST DB_PORT DB_USER DB_PASSWORD DB_NAME

            # Write docker-compose.yml safely
            printf '%s\n' \
              'name: myprojectappdev' \
              'services:' \
              '  frontend:' \
              '    image: ghcr.io/gdragos79/myprojectappprod-frontend:${TAG:-latest}' \
              '    restart: unless-stopped' \
              '    ports: ["80:80"]' \
              '    depends_on: ["backend"]' \
              '  backend:' \
              '    image: ghcr.io/gdragos79/myprojectappprod-backend:${TAG:-latest}' \
              '    restart: unless-stopped' \
              '    ports: ["3000:3000"]' \
              '    environment:' \
              '      PORT: 3000' \
              '      DB_HOST: ${DB_HOST?DB_HOST not set}' \
              '      DB_PORT: ${DB_PORT?DB_PORT not set}' \
              '      DB_USER: ${DB_USER?DB_USER not set}' \
              '      DB_PASSWORD: ${DB_PASSWORD?DB_PASSWORD not set}' \
              '      DB_NAME: ${DB_NAME?DB_NAME not set}' \
              > docker-compose.yml

            docker compose pull
            docker compose up -d --force-recreate --remove-orphans
            docker image prune -f || true

            echo '--- Backend health ---'
            (curl -is http://localhost:3000/healthz | sed -n '1p') || true
            echo '--- Frontend index ---'
            (curl -I  http://localhost/ | sed -n '1p') || true

      - name: Deploy to GREEN App VM
        if: ${{ inputs.color == 'green' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.APP_GREEN_SSH_HOST }}
          username: ${{ secrets.APP_GREEN_SSH_USER }}
          key: ${{ secrets.APP_GREEN_SSH_KEY }}
          script_stop: true
        env:
          DEPLOY_TAG: ${{ inputs.tag }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        with:
          script: |
            set -euo pipefail
            mkdir -p ~/app && cd ~/app

            # Optional GHCR login (only if creds exist)
            if [ -n "${GHCR_USERNAME:-}" ] && [ -n "${GHCR_TOKEN:-}" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            fi

            export TAG="${DEPLOY_TAG}"
            export DB_HOST DB_PORT DB_USER DB_PASSWORD DB_NAME

            printf '%s\n' \
              'name: myprojectappdev' \
              'services:' \
              '  frontend:' \
              '    image: ghcr.io/gdragos79/myprojectappprod-frontend:${TAG:-latest}' \
              '    restart: unless-stopped' \
              '    ports: ["80:80"]' \
              '    depends_on: ["backend"]' \
              '  backend:' \
              '    image: ghcr.io/gdragos79/myprojectappprod-backend:${TAG:-latest}' \
              '    restart: unless-stopped' \
              '    ports: ["3000:3000"]' \
              '    environment:' \
              '      PORT: 3000' \
              '      DB_HOST: ${DB_HOST?DB_HOST not set}' \
              '      DB_PORT: ${DB_PORT?DB_PORT not set}' \
              '      DB_USER: ${DB_USER?DB_USER not set}' \
              '      DB_PASSWORD: ${DB_PASSWORD?DB_PASSWORD not set}' \
              '      DB_NAME: ${DB_NAME?DB_NAME not set}' \
              > docker-compose.yml

            docker compose pull
            docker compose up -d --force-recreate --remove-orphans
            docker image prune -f || true

            echo '--- Backend health ---'
            (curl -is http://localhost:3000/healthz | sed -n '1p') || true
            echo '--- Frontend index ---'
            (curl -I  http://localhost/ | sed -n '1p') || true

      - name: Flip Proxy to TARGET color
        if: ${{ inputs.flip_proxy == true }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROXY_SSH_HOST }}
          username: ${{ secrets.PROXY_SSH_USER }}
          key: ${{ secrets.PROXY_SSH_KEY }}
          script_stop: true
        env:
          TARGET_COLOR: ${{ inputs.color }}
        with:
          script: |
            set -euo pipefail
            COLOR="${TARGET_COLOR}"
            sudo ln -sf "/etc/nginx/sites-available/active-${COLOR}.conf" "/etc/nginx/sites-enabled/active.conf"
            sudo nginx -t
            sudo systemctl reload nginx
            echo "Proxy flipped to ${COLOR}"
