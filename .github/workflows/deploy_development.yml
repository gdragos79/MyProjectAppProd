# This workflow deploys a chosen image tag to either the BLUE or GREEN app VM,
# then can (optionally) switch the external proxy to route traffic to that color.
#
# Required Environment secrets (set per Environment in GitHub → Settings → Environments):
# - APP_BLUE_SSH_HOST     : IP or hostname of BLUE App VM
# - APP_BLUE_SSH_USER     : SSH user on BLUE App VM
# - APP_BLUE_SSH_KEY      : Private key for BLUE App VM
# - APP_GREEN_SSH_HOST    : IP or hostname of GREEN App VM
# - APP_GREEN_SSH_USER    : SSH user on GREEN App VM
# - APP_GREEN_SSH_KEY     : Private key for GREEN App VM
# - PROXY_SSH_HOST        : IP or hostname of Proxy VM
# - PROXY_SSH_USER        : SSH user on Proxy VM (must be able to run sudo without password for nginx reload)
# - PROXY_SSH_KEY         : Private key for Proxy VM
# - DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME : Database connection for backend
#
# Notes:
# - The proxy is expected to use an Nginx config where a symlink controls the active upstream.
# - See deploy/proxy/nginx/sites-enabled/README-switch.txt in the starter pack for details.
name: Deploy (Development)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (sha7 or 'latest')"
        required: true
        default: "latest"
      color:
        description: "Which color to deploy to?"
        required: true
        default: "blue"
        type: choice
        options: ["blue", "green"]
      switch_traffic:
        description: "Switch the proxy to the chosen color after deployment?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Development
    concurrency:
      group: deploy-development
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      # ---- HARD CHECK: Tailscale OAuth client secrets must be present and well-formed
      - name: Validate Tailscale OAuth secrets
        shell: bash
        env:
          TS_ID:     ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_SECRET: ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
        run: |
          if [ -z "$TS_ID" ]; then
            echo "Missing TS_OAUTH_CLIENT_ID in Environment: Development" >&2; exit 1
          fi
          if [ -z "$TS_SECRET" ]; then
            echo "Missing TS_OAUTH_CLIENT_SECRET in Environment: Development" >&2; exit 1
          fi
          case "$TS_ID" in tskey-client-*) : ;; *) echo "TS_OAUTH_CLIENT_ID should start with 'tskey-client-'" >&2; exit 1 ;; esac
          case "$TS_SECRET" in tskey-secret-*) : ;; *) echo "TS_OAUTH_CLIENT_SECRET should start with 'tskey-secret-'" >&2; exit 1 ;; esac
          echo "✅ Tailscale OAuth secrets look valid."

      # ---- Connect the GitHub runner to your tailnet via OAuth client (no manual approval needed)
      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret:     ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
          args: --timeout=2m --accept-routes --accept-dns=true --hostname=gha-${{ github.run_id }}

      # ==================== BLUE path: ensure target dir + preflight ====================
      - name: Preflight (BLUE) — ensure dir and check Docker
        if: ${{ inputs.color == 'blue' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.APP_BLUE_SSH_HOST }}   # Tailscale MagicDNS or 100.x
          username: ${{ secrets.APP_BLUE_SSH_USER }}
          key:      ${{ secrets.APP_BLUE_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            echo "Connected to BLUE"; hostname; uname -a
            docker --version || (echo "Docker not installed" && exit 1)
            mkdir -p /home/${USER}/app/myapp_blue

      # ==================== GREEN path: ensure target dir + preflight ====================
      - name: Preflight (GREEN) — ensure dir and check Docker
        if: ${{ inputs.color == 'green' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.APP_GREEN_SSH_HOST }}
          username: ${{ secrets.APP_GREEN_SSH_USER }}
          key:      ${{ secrets.APP_GREEN_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            echo "Connected to GREEN"; hostname; uname -a
            docker --version || (echo "Docker not installed" && exit 1)
            mkdir -p /home/${USER}/app/myapp_green

      # ---- Render docker-compose.yml ON THE RUNNER (no secrets inside the file)
      - name: Render docker-compose.yml
        run: |
          mkdir -p "$RUNNER_TEMP/deploy"
          cat > "$RUNNER_TEMP/deploy/docker-compose.yml" <<'YAML'
          services:
            frontend:
              image: ghcr.io/${{ github.repository }}-frontend:${TAG:-latest}
              ports:
                - "80:80"
              depends_on:
                - backend
            backend:
              image: ghcr.io/${{ github.repository }}-backend:${TAG:-latest}
              environment:
                DB_HOST: ${DB_HOST}
                DB_PORT: ${DB_PORT}
                DB_USER: ${DB_USER}
                DB_PASSWORD: ${DB_PASSWORD}
                DB_NAME: ${DB_NAME}
              ports:
                - "3000:3000"
              healthcheck:
                test: ["CMD", "node", "-e", "fetch('http://localhost:3000/api/health').then(r=>{if(r.ok)process.exit(0);else process.exit(1)}).catch(()=>process.exit(1))"]
                interval: 15s
                timeout: 5s
                retries: 5
          YAML
          echo "Rendered: $RUNNER_TEMP/deploy/docker-compose.yml"

      # ---- Upload compose to BLUE/GREEN using SCP (path was created in preflight)
      - name: Upload compose to BLUE
        if: ${{ inputs.color == 'blue' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.APP_BLUE_SSH_HOST }}
          username: ${{ secrets.APP_BLUE_SSH_USER }}
          key:      ${{ secrets.APP_BLUE_SSH_KEY }}
          source:   ${{ runner.temp }}/deploy/docker-compose.yml
          target:   /home/${{ secrets.APP_BLUE_SSH_USER }}/app/myapp_blue/
          overwrite: true

      - name: Upload compose to GREEN
        if: ${{ inputs.color == 'green' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.APP_GREEN_SSH_HOST }}
          username: ${{ secrets.APP_GREEN_SSH_USER }}
          key:      ${{ secrets.APP_GREEN_SSH_KEY }}
          source:   ${{ runner.temp }}/deploy/docker-compose.yml
          target:   /home/${{ secrets.APP_GREEN_SSH_USER }}/app/myapp_green/
          overwrite: true

      # ==================== Deploy to BLUE ====================
      - name: Deploy to BLUE
        if: ${{ inputs.color == 'blue' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.APP_BLUE_SSH_HOST }}
          username: ${{ secrets.APP_BLUE_SSH_USER }}
          key:      ${{ secrets.APP_BLUE_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd /home/${USER}/app/myapp_blue

            # If GHCR packages are PRIVATE, uncomment the next line and add GHCR_USERNAME + GHCR_TOKEN (read:packages) to Environment secrets:
            # echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            # .env contains runtime secrets (compose reads via --env-file)
            cat > .env <<'EOF'
            TAG=${{ inputs.tag }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            EOF

            docker compose --env-file .env pull
            docker compose --env-file .env up -d --remove-orphans
            sleep 3
            curl -v -fsS http://localhost/api/health || (docker compose logs --no-color --tail=200; exit 1)

      # ==================== Deploy to GREEN ====================
      - name: Deploy to GREEN
        if: ${{ inputs.color == 'green' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.APP_GREEN_SSH_HOST }}
          username: ${{ secrets.APP_GREEN_SSH_USER }}
          key:      ${{ secrets.APP_GREEN_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd /home/${USER}/app/myapp_green

            # If GHCR packages are PRIVATE, uncomment:
            # echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            cat > .env <<'EOF'
            TAG=${{ inputs.tag }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            EOF

            docker compose --env-file .env pull
            docker compose --env-file .env up -d --remove-orphans
            sleep 3
            curl -v -fsS http://localhost/api/health || (docker compose logs --no-color --tail=200; exit 1)

      # ==================== Optional: switch proxy to color ====================
      - name: Switch proxy to selected color
        if: ${{ inputs.switch_traffic == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.PROXY_SSH_HOST }}
          username: ${{ secrets.PROXY_SSH_USER }}
          key:      ${{ secrets.PROXY_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            COLOR=${{ inputs.color }}
            sudo ln -sfn /etc/nginx/upstreams/$COLOR.conf /etc/nginx/upstreams/active.conf
            sudo nginx -t
            sudo systemctl reload nginx
            curl -v -fsS http://localhost/api/health || (echo "Proxy smoke test failed" && exit 1)
