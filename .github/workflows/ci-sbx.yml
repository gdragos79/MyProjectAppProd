name: CI SBX (sync main→dev, test, optional pushes)

on:
  workflow_dispatch:
    inputs:
      SYNC_DEVELOPMENT:
        description: "If true, push the synced dev (after tests pass) back to origin/Development."
        type: boolean
        default: false
      MERGE_TO_MAIN:
        description: "If true, merge Development → main (after dev push). Leave false for SBX."
        type: boolean
        default: false

permissions:
  contents: write   # only needed if you toggle push/merge inputs to true
  packages: read

jobs:
  ci:
    # allow running on your test & env branches
    if: ${{ github.ref_name == 'restructure/monorepo' || github.ref_name == 'Development' || github.ref_name == 'Staging' || github.ref_name == 'Production' }}
    runs-on: ubuntu-latest
    environment:
      name: Development-SBX

    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 1) Prepare a local scratch branch = dev-ci
      - name: Create local dev-ci from origin/Development and merge origin/main
        run: |
          set -euo pipefail
          git fetch origin --prune

          # Prefer origin/Development; fallback to origin/main if missing
          if git ls-remote --exit-code --heads origin Development >/dev/null 2>&1; then
            echo "Using origin/Development as base…"
            git checkout -B dev-ci origin/Development
          else
            echo "::warning::origin/Development not found; using origin/main as base."
            git checkout -B dev-ci origin/main
          fi

          # Merge main into dev-ci (simulate 'pull main into Development')
          git merge --no-edit origin/main

      # 2) BACKEND: install, test
      - name: Backend - install deps (npm ci)
        working-directory: apps/backend
        run: npm ci

      - name: Backend - tests
        working-directory: apps/backend
        env:
          DB_HOST: ${{ secrets.DEV_DB_HOST }}
          DB_PORT: ${{ secrets.DEV_DB_PORT }}
          DB_USER: ${{ secrets.DEV_DB_USER }}
          DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
          DB_NAME: ${{ secrets.DEV_DB_NAME }}
        run: |
          npm test -- --runInBand || echo "No backend tests yet? Add a Jest+Supertest health test."

      # 3) FRONTEND: install, build
      - name: Frontend - install deps (npm ci)
        working-directory: apps/frontend
        run: npm ci

      - name: Frontend - build
        working-directory: apps/frontend
        run: npm run build

      # 4) OPTIONAL: push dev-ci → origin/Development (only if SYNC_DEVELOPMENT=true)
      - name: Push dev-ci to origin/Development (optional)
        if: ${{ inputs.SYNC_DEVELOPMENT }}
        run: |
          set -euo pipefail
          git checkout -B Development origin/Development || git checkout -B Development dev-ci
          git merge --ff-only dev-ci || git merge --no-edit dev-ci
          git push --force-with-lease origin HEAD:Development

      # 5) OPTIONAL: merge Development → main (only if MERGE_TO_MAIN=true)
      - name: Merge Development into main (optional)
        if: ${{ inputs.MERGE_TO_MAIN }}
        run: |
          set -euo pipefail
          git checkout main
          git fetch origin Development
          git merge --ff-only origin/Development || git merge --no-edit origin/Development
          git push origin main
