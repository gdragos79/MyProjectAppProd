name: CI SBX (sync main→dev, test, optional pushes)

on:
  workflow_dispatch:
    inputs:
      SYNC_DEVELOPMENT:
        description: "If true, push the tested dev-ci back to origin/development (creates it if missing)."
        type: boolean
        default: false
      MERGE_TO_MAIN:
        description: "If true, merge development → main (after dev push). Leave false for SBX."
        type: boolean
        default: false

permissions:
  contents: write
  packages: read

jobs:
  ci:
    if: github.ref_name == 'restructure/monorepo'
    runs-on: ubuntu-latest
    environment:
      name: Development-SBX

    steps:
      - name: Checkout repository (full history @ triggering ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Robust prep: if origin/development exists use it and merge origin/main;
      # otherwise base dev-ci directly on origin/main so tests still run.
      - name: Prepare local 'dev-ci' (robust; handles missing development)
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          git fetch --prune origin "+refs/heads/*:refs/remotes/origin/*"

          if git ls-remote --exit-code --heads origin development >/dev/null 2>&1; then
            echo "BASE=origin/development" >> $GITHUB_OUTPUT
            git checkout -B dev-ci origin/development
            if git ls-remote --exit-code --heads origin main >/dev/null 2>&1; then
              git merge --no-edit origin/main || true
            else
              echo "[WARN] origin/main not found; skipping merge."
            fi
          else
            echo "BASE=origin/main" >> $GITHUB_OUTPUT
            if git ls-remote --exit-code --heads origin main >/dev/null 2>&1; then
              git checkout -B dev-ci origin/main
            else
              echo "[ERROR] Neither origin/development nor origin/main exist. Cannot proceed."
              exit 1
            fi
          fi

      # BACKEND
      - name: Backend - install deps (npm ci)
        working-directory: apps/backend
        run: npm ci

      - name: Backend - tests
        working-directory: apps/backend
        env:
          DB_HOST: ${{ secrets.DEV_DB_HOST }}
          DB_PORT: ${{ secrets.DEV_DB_PORT }}
          DB_USER: ${{ secrets.DEV_DB_USER }}
          DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
          DB_NAME: ${{ secrets.DEV_DB_NAME }}
        run: |
          npm test -- --runInBand || echo "No backend tests yet? Add a Jest+Supertest health test."

      # FRONTEND
      - name: Frontend - install deps (npm ci)
        working-directory: apps/frontend
        run: npm ci

      - name: Frontend - build
        working-directory: apps/frontend
        run: npm run build

      # OPTIONAL: push dev-ci → origin/development (creates it if missing)
      - name: Push dev-ci → origin/development (optional)
        if: inputs.SYNC_DEVELOPMENT == true
        shell: bash
        run: |
          set -euo pipefail
          git checkout dev-ci
          if git rev-parse --verify --quiet development >/dev/null; then
            git checkout development
            git merge --ff-only dev-ci || git merge --no-edit dev-ci
          else
            git checkout -B development dev-ci
          fi
          git push origin development

      # OPTIONAL: merge development → main
      - name: Merge development into main (optional)
        if: inputs.MERGE_TO_MAIN == true
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin development main

          if git ls-remote --exit-code --heads origin development >/dev/null 2>&1; then
            git checkout -B development origin/development
          else
            echo "ERROR: origin/development does not exist; cannot merge into main."
            exit 1
          fi

          if git ls-remote --exit-code --heads origin main >/dev/null 2>&1; then
            git checkout -B main origin/main
          else
            echo "ERROR: origin/main not found; cannot update main."
            exit 1
          fi

          git merge --ff-only development || git merge --no-edit development
          git push origin main
