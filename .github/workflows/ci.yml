name: CI (Build & Test)

on:
  push:
  pull_request:

permissions:
  contents: read
  packages: read

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Detect where the backend lives
      - name: Detect backend path
        id: detect_backend
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "apps/backend/package.json" ]; then
            echo "dir=apps/backend" >> "$GITHUB_OUTPUT"
          elif [ -f "backend/package.json" ]; then
            echo "dir=backend" >> "$GITHUB_OUTPUT"
          else
            echo "dir=" >> "$GITHUB_OUTPUT"
          fi

      # 2) Setup Node only if backend exists, and cache the *correct* lockfile
      - name: Set up Node.js 20 (backend; with cache)
        if: steps.detect_backend.outputs.dir != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ${{ steps.detect_backend.outputs.dir }}/package-lock.json

      # 3) Install deps (ci -> install fallback when lock is stale/missing)
      - name: Backend deps (ci→install fallback if lock is stale)
        if: steps.detect_backend.outputs.dir != ''
        working-directory: ${{ steps.detect_backend.outputs.dir }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            if ! npm ci; then
              echo "npm ci failed (lockfile mismatch). Falling back to npm install…"
              rm -f package-lock.json
              npm install --no-audit --no-fund
            fi
          else
            echo "No package-lock.json found → using npm install"
            npm install --no-audit --no-fund
          fi

      - name: Backend tests (skip if no test script)
        if: steps.detect_backend.outputs.dir != ''
        working-directory: ${{ steps.detect_backend.outputs.dir }}
        run: npm run test --if-present -- --runInBand || echo "No backend tests yet"

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Detect where the frontend lives
      - name: Detect frontend path
        id: detect_frontend
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "apps/frontend/package.json" ]; then
            echo "dir=apps/frontend" >> "$GITHUB_OUTPUT"
          elif [ -f "react/package.json" ]; then
            echo "dir=react" >> "$GITHUB_OUTPUT"
          else
            echo "dir=" >> "$GITHUB_OUTPUT"
          fi

      # 2) Setup Node only if frontend exists, and cache the *correct* lockfile
      - name: Set up Node.js 20 (frontend; with cache)
        if: steps.detect_frontend.outputs.dir != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ${{ steps.detect_frontend.outputs.dir }}/package-lock.json

      - name: Frontend deps
        if: steps.detect_frontend.outputs.dir != ''
        working-directory: ${{ steps.detect_frontend.outputs.dir }}
        run: npm ci

      - name: Frontend build (skip if no script)
        if: steps.detect_frontend.outputs.dir != ''
        working-directory: ${{ steps.detect_frontend.outputs.dir }}
        run: npm run build --if-present || echo "No frontend build script"
