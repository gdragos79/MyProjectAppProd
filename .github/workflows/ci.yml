name: CI (Build & Test)

on:
  push:
  pull_request:

permissions:
  contents: read
  packages: read

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Detect backend path
        id: detect_backend
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "apps/backend/package.json" ]; then
            echo "BACKEND_DIR=apps/backend" >> "$GITHUB_ENV"
            echo "dir=apps/backend" >> "$GITHUB_OUTPUT"
          elif [ -f "backend/package.json" ]; then
            echo "BACKEND_DIR=backend" >> "$GITHUB_ENV"
            echo "dir=backend" >> "$GITHUB_OUTPUT"
          else
            echo "No backend detected"; echo "dir=" >> "$GITHUB_OUTPUT"
          fi

      - name: Backend deps
        if: steps.detect_backend.outputs.dir != ''
        working-directory: ${{ steps.detect_backend.outputs.dir }}
        run: npm ci

      - name: Backend tests
        if: steps.detect_backend.outputs.dir != ''
        working-directory: ${{ steps.detect_backend.outputs.dir }}
        run: |
          # Run tests if present; otherwise exit 0 so CI stays green
          npm test --if-present -- --runInBand || echo "No backend tests yet"

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Detect frontend path
        id: detect_frontend
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "apps/frontend/package.json" ]; then
            echo "FRONTEND_DIR=apps/frontend" >> "$GITHUB_ENV"
            echo "dir=apps/frontend" >> "$GITHUB_OUTPUT"
          elif [ -f "react/package.json" ]; then
            echo "FRONTEND_DIR=react" >> "$GITHUB_ENV"
            echo "dir=react" >> "$GITHUB_OUTPUT"
          else
            echo "No frontend detected"; echo "dir=" >> "$GITHUB_OUTPUT"
          fi

      - name: Frontend deps
        if: steps.detect_frontend.outputs.dir != ''
        working-directory: ${{ steps.detect_frontend.outputs.dir }}
        run: npm ci

      - name: Frontend build
        if: steps.detect_frontend.outputs.dir != ''
        working-directory: ${{ steps.detect_frontend.outputs.dir }}
        run: |
          # Build if present; otherwise exit 0 so CI stays green
          npm run build --if-present || echo "No frontend build script"
name: CI (Build & Test)

on:
  pull_request:
    branches: [ main, staging, development ]
  push:
    branches: ['**']   # run on pushes to any branch
  workflow_dispatch:

# Keep runs tidy: one CI per branch at a time
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Use Node 20 with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Test (if present)
        run: npm test --if-present

      - name: Build (if present)
        run: npm run build --if-present

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: react
    steps:
      - uses: actions/checkout@v4

      - name: Use Node 20 with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: react/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Test (if present)
        run: npm test --if-present

      - name: Build (if present)
        run: npm run build --if-present

  images:
    name: Docker Build (validate; push only on non-PR)
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write     # required to push to GHCR on push/workflow_dispatch
    env:
      IMAGE_BACKEND:  ghcr.io/gdragos79/myprojectappprod-backend
      IMAGE_FRONTEND: ghcr.io/gdragos79/myprojectappprod-frontend
    steps:
      - uses: actions/checkout@v4

      - name: Debug tree & verify Dockerfiles
        shell: bash
        run: |
          echo "HEAD=$(git rev-parse --short HEAD)"
          ls -la
          echo "---- backend ----"
          ls -la backend || true
          echo "---- react ----"
          ls -la react || true
          test -f backend/Dockerfile || (echo "::error:: missing backend/Dockerfile"; exit 1)
          test -f react/Dockerfile   || (echo "::error:: missing react/Dockerfile"; exit 1)

      - name: Login to GHCR (skip on PR)
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # IMPORTANT: use context="." and file="backend/Dockerfile" (path from repo root)
      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.IMAGE_BACKEND }}:ci-${{ github.run_id }}

      # IMPORTANT: use context="." and file="react/Dockerfile" (path from repo root)
      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: react/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.IMAGE_FRONTEND }}:ci-${{ github.run_id }}
