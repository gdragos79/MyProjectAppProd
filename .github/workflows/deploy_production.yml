name: Deploy Production (Blue/Green)

on:
  workflow_dispatch:
    inputs:
      color:
        description: "Which color to deploy?"
        type: choice
        options: [blue, green]
        default: green
        required: true
      tag:
        description: "Docker tag to deploy (backend & frontend)"
        type: string
        default: latest
        required: true
      flip_proxy:
        description: "Flip proxy to this color after successful deploy?"
        type: boolean
        default: true
        required: true

concurrency:
  group: deploy-production
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ---------- Deploy to BLUE ----------
      - name: Deploy to BLUE App VM
        if: ${{ inputs.color == 'blue' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.APP_BLUE_SSH_HOST }}
          username: ${{ secrets.APP_BLUE_SSH_USER }}
          key: ${{ secrets.APP_BLUE_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            mkdir -p ~/app && cd ~/app

            # Optional GHCR login (for private images). Only runs if creds exist.
            GHCR_USER="${{ secrets.GHCR_USERNAME }}"
            GHCR_PAT="${{ secrets.GHCR_TOKEN }}"
            if [ -n "${GHCR_USER:-}" ] && [ -n "${GHCR_PAT:-}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi

            # Export runtime variables for compose variable substitution
            export TAG="${{ inputs.tag }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_NAME="${{ secrets.DB_NAME }}"

            # Write docker-compose.yml (printf avoids YAML/heredoc pitfalls)
            printf '%s\n' \
              'name: myprojectappprod' \
              'services:' \
              '  frontend:' \
              '    image: ghcr.io/gdragos79/myprojectappprod-frontend:${TAG:-latest}' \
              '    restart: unless-stopped' \
              '    ports: ["80:80"]' \
              '    depends_on: ["backend"]' \
              '  backend:' \
              '    image: ghcr.io/gdragos79/myprojectappprod-backend:${TAG:-latest}' \
              '    restart: unless-stopped' \
              '    ports: ["3000:3000"]' \
              '    environment:' \
              '      PORT: 3000' \
              '      DB_HOST: ${DB_HOST?DB_HOST not set}' \
              '      DB_PORT: ${DB_PORT?DB_PORT not set}' \
              '      DB_USER: ${DB_USER?DB_USER not set}' \
              '      DB_PASSWORD: ${DB_PASSWORD?DB_PASSWORD not set}' \
              '      DB_NAME: ${DB_NAME?DB_NAME not set}' \
              > docker-compose.yml

            docker compose version || true
            docker compose pull
            docker compose up -d --force-recreate --remove-orphans
            docker image prune -f || true

            echo '--- Backend health ---'
            (curl -is http://localhost:3000/healthz | sed -n '1p') || true
            echo '--- Frontend index ---'
            (curl -I  http://localhost/ | sed -n '1p') || true

      # ---------- Deploy to GREEN ----------
      - name: Deploy to GREEN App VM
        if: ${{ inputs.color == 'green' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.APP_GREEN_SSH_HOST }}
          username: ${{ secrets.APP_GREEN_SSH_USER }}
          key: ${{ secrets.APP_GREEN_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            mkdir -p ~/app && cd ~/app

            # Optional GHCR login (for private images). Only runs if creds exist.
            GHCR_USER="${{ secrets.GHCR_USERNAME }}"
            GHCR_PAT="${{ secrets.GHCR_TOKEN }}"
            if [ -n "${GHCR_USER:-}" ] && [ -n "${GHCR_PAT:-}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi

            # Export runtime variables for compose variable substitution
            export TAG="${{ inputs.tag }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_NAME="${{ secrets.DB_NAME }}"

            # Write docker-compose.yml (printf avoids YAML/heredoc pitfalls)
            printf '%s\n' \
              'name: myprojectappprod' \
              'services:' \
              '  frontend:' \
              '    image: ghcr.io/gdragos79/myprojectappprod-frontend:${TAG:-latest}' \
              '    restart: unless-stopped' \
              '    ports: ["80:80"]' \
              '    depends_on: ["backend"]' \
              '  backend:' \
              '    image: ghcr.io/gdragos79/myprojectappprod-backend:${TAG:-latest}' \
              '    restart: unless-stopped' \
              '    ports: ["3000:3000"]' \
              '    environment:' \
              '      PORT: 3000' \
              '      DB_HOST: ${DB_HOST?DB_HOST not set}' \
              '      DB_PORT: ${DB_PORT?DB_PORT not set}' \
              '      DB_USER: ${DB_USER?DB_USER not set}' \
              '      DB_PASSWORD: ${DB_PASSWORD?DB_PASSWORD not set}' \
              '      DB_NAME: ${DB_NAME?DB_NAME not set}' \
              > docker-compose.yml

            docker compose version || true
            docker compose pull
            docker compose up -d --force-recreate --remove-orphans
            docker image prune -f || true

            echo '--- Backend health ---'
            (curl -is http://localhost:3000/healthz | sed -n '1p') || true
            echo '--- Frontend index ---'
            (curl -I  http://localhost/ | sed -n '1p') || true

      # ---------- Flip Proxy (optional) ----------
      - name: Flip Proxy to TARGET color
        if: ${{ inputs.flip_proxy == true }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROXY_SSH_HOST }}
          username: ${{ secrets.PROXY_SSH_USER }}
          key: ${{ secrets.PROXY_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            COLOR="${{ inputs.color }}"
            # Expecting /etc/nginx/sites-available/active-blue.conf and active-green.conf to exist
            sudo ln -sf "/etc/nginx/sites-available/active-${COLOR}.conf" "/etc/nginx/sites-enabled/active.conf"
            sudo nginx -t
            sudo systemctl reload nginx
            echo "Proxy flipped to ${COLOR}"
