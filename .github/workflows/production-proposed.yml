name: Production (Blue/Green deploy with auto-rollback) [PROPOSED]

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Human TAG (e.g., 01_11_2025_v1.0_main)"
        required: true
        type: string
  push:
    tags:
      - 'prod/*'

permissions:
  contents: read
  packages: read

env:
  IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/myprojectappprod-backend

jobs:
  prod:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Determine TAG
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            RAW="${{ github.ref_name }}"
            echo "TAG=${RAW#prod/}" >> $GITHUB_OUTPUT
          fi

      - name: Prepare SSH keys
        run: |
          install -m 700 -d ~/.ssh
          echo "${{ secrets.PROXY_SSH_KEY }}" > ~/.ssh/proxy_key && chmod 600 ~/.ssh/proxy_key
          ssh-keyscan -H "${{ secrets.PROXY_SSH_HOST }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.BLUE_SSH_KEY }}"  > ~/.ssh/blue_key  && chmod 600 ~/.ssh/blue_key
          ssh-keyscan -H "${{ secrets.BLUE_SSH_HOST }}"  >> ~/.ssh/known_hosts
          echo "${{ secrets.GREEN_SSH_KEY }}" > ~/.ssh/green_key && chmod 600 ~/.ssh/green_key
          ssh-keyscan -H "${{ secrets.GREEN_SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Find active color on proxy
        id: active
        env:
          PROXY: ${{ secrets.PROXY_SSH_HOST }}
          PUSER: ${{ secrets.PROXY_SSH_USER }}
        run: |
          target=$(ssh -i ~/.ssh/proxy_key ${PUSER}@${PROXY} 'readlink -f /etc/nginx/upstreams/active.conf | xargs basename || basename /etc/nginx/upstreams/active.conf')
          if echo "$target" | grep -qi blue; then
            echo "ACTIVE=blue" >> $GITHUB_OUTPUT
            echo "INACTIVE=green" >> $GITHUB_OUTPUT
          else
            echo "ACTIVE=green" >> $GITHUB_OUTPUT
            echo "INACTIVE=blue" >> $GITHUB_OUTPUT
          fi

      - name: Pick inactive VM
        id: pick
        run: |
          if [ "${{ steps.active.outputs.INACTIVE }}" = "blue" ]; then
            echo "HOST=${{ secrets.BLUE_SSH_HOST }}" >> $GITHUB_OUTPUT
            echo "USER=${{ secrets.BLUE_SSH_USER }}" >> $GITHUB_OUTPUT
            echo "KEY=~/.ssh/blue_key" >> $GITHUB_OUTPUT
          else
            echo "HOST=${{ secrets.GREEN_SSH_HOST }}" >> $GITHUB_OUTPUT
            echo "USER=${{ secrets.GREEN_SSH_USER }}" >> $GITHUB_OUTPUT
            echo "KEY=~/.ssh/green_key" >> $GITHUB_OUTPUT
          fi

      - name: Deploy on INACTIVE VM
        env:
          HOST:  ${{ steps.pick.outputs.HOST }}
          USER:  ${{ steps.pick.outputs.USER }}
          KEY:   ${{ steps.pick.outputs.KEY }}
          IMAGE: ${{ env.IMAGE_BACKEND }}:prod-${{ steps.tag.outputs.TAG }}
          DB_HOST: ${{ secrets.PRD_DB_HOST }}
          DB_PORT: ${{ secrets.PRD_DB_PORT }}
          DB_USER: ${{ secrets.PRD_DB_USER }}
          DB_PASS: ${{ secrets.PRD_DB_PASSWORD }}
          DB_NAME: ${{ secrets.PRD_DB_NAME }}
        run: |
          set -e
          NAME="prodContainer_${{ steps.active.outputs.INACTIVE }}_${{ steps.tag.outputs.TAG }}"
          ssh -i ${KEY} ${USER}@${HOST} "docker rm -f $(docker ps -a -q --filter name=prodContainer_) || true"
          ssh -i ${KEY} ${USER}@${HOST} "docker pull ${IMAGE}"
          ssh -i ${KEY} ${USER}@${HOST} "docker run -d --name ${NAME} --restart unless-stopped -e DB_HOST='${DB_HOST}' -e DB_PORT='${DB_PORT}' -e DB_USER='${DB_USER}' -e DB_PASSWORD='${DB_PASS}' -e DB_NAME='${DB_NAME}' -p 3000:3000 ${IMAGE}"

      - name: Health check (inactive VM local)
        env:
          HOST:  ${{ steps.pick.outputs.HOST }}
          USER:  ${{ steps.pick.outputs.USER }}
          KEY:   ${{ steps.pick.outputs.KEY }}
        run: |
          for i in {1..30}; do
            if ssh -i ${KEY} ${USER}@${HOST} "curl -fsS http://127.0.0.1:3000/api/health | grep -q '"ok":true'"; then
              exit 0
            fi
            sleep 5
          done
          exit 1

      - name: Flip proxy
        env:
          PROXY: ${{ secrets.PROXY_SSH_HOST }}
          PUSER: ${{ secrets.PROXY_SSH_USER }}
        run: |
          COLOR="${{ steps.active.outputs.INACTIVE }}"
          ssh -i ~/.ssh/proxy_key ${PUSER}@${PROXY} "sudo ln -sf /etc/nginx/upstreams/${COLOR}.conf /etc/nginx/upstreams/active.conf && sudo systemctl reload nginx"

      - name: Bake 10 minutes
        run: sleep 600

      - name: Health via proxy
        id: via_proxy
        continue-on-error: true
        env:
          PROXY: ${{ secrets.PROXY_SSH_HOST }}
        run: |
          for i in {1..12}; do
            if curl -fsS "http://${PROXY}/api/health" | grep -q '"ok":true'; then
              exit 0
            fi
            sleep 10
          done
          exit 1

      - name: Rollback if needed
        if: steps.via_proxy.outcome == 'failure'
        env:
          PROXY: ${{ secrets.PROXY_SSH_HOST }}
          PUSER: ${{ secrets.PROXY_SSH_USER }}
        run: |
          COLOR="${{ steps.active.outputs.ACTIVE }}"
          ssh -i ~/.ssh/proxy_key ${PUSER}@${PROXY} "sudo ln -sf /etc/nginx/upstreams/${COLOR}.conf /etc/nginx/upstreams/active.conf && sudo systemctl reload nginx"
          HOST="${{ steps.pick.outputs.HOST }}"; USER="${{ steps.pick.outputs.USER }}"; KEY="${{ steps.pick.outputs.KEY }}"
          BAD="prodContainer_${{ steps.active.outputs.INACTIVE }}_${{ steps.tag.outputs.TAG }}"
          ssh -i ${KEY} ${USER}@${HOST} "docker rm -f ${BAD} || true"
          exit 1
