name: Deploy (self-hosted, Blue/Green)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Image tag to deploy (e.g., latest or sha7)
        required: true
        default: latest
      color:
        description: Which color to deploy?
        required: true
        default: blue
        type: choice
        options: [blue, green]
      switch_traffic:
        description: Switch proxy to this color after deploy?
        required: true
        default: "false"
        type: choice
        options: ["false", "true"]

permissions:
  contents: read
  packages: read   # needed so docker/login-action can pull from GHCR using GITHUB_TOKEN

env:
  COMPOSE_FILE: deploy/docker-compose.yml

jobs:
  deploy_blue:
    if: ${{ inputs.color == 'blue' }}
    runs-on: [self-hosted, app-blue]    # labels on your BLUE VM runner
    environment: Development            # DB_* secrets live here
    concurrency:
      group: deploy-blue
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR (pull auth)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Write env file for Compose (deploy/.env)
        run: |
          mkdir -p deploy
          : > deploy/.env
          {
            echo TAG=${{ inputs.tag }}
            echo DB_HOST=${{ secrets.DB_HOST }}
            echo DB_PORT=${{ secrets.DB_PORT }}
            echo DB_USER=${{ secrets.DB_USER }}
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            echo DB_NAME=${{ secrets.DB_NAME }}
          } >> deploy/.env

      - name: Deploy on BLUE (with robust health check)
        env:
          COMPOSE_FILE: ${{ env.COMPOSE_FILE }}
        run: |
          set -e
          docker compose --env-file deploy/.env -f "$COMPOSE_FILE" pull
          docker compose --env-file deploy/.env -f "$COMPOSE_FILE" up -d --remove-orphans

          # --- Robust health check: try several common endpoints with retries (~60s) ---
          HEALTH_CANDIDATES=(
            "http://localhost/api/health"
            "http://localhost/health"
            "http://localhost:3000/health"
            "http://localhost:3000/api/health"
          )
          echo "Waiting for service to become healthy..."
          for i in {1..30}; do
            for url in "${HEALTH_CANDIDATES[@]}"; do
              if curl -fsS "$url" >/dev/null 2>&1; then
                echo "✅ Health OK at $url"
                exit 0
              fi
            done
            sleep 2
          done

          echo "❌ Health check failed after retries. Recent status & logs:"
          docker compose -f "$COMPOSE_FILE" ps
          docker compose -f "$COMPOSE_FILE" logs --no-color --tail=200
          exit 1

  deploy_green:
    if: ${{ inputs.color == 'green' }}
    runs-on: [self-hosted, app-green]   # labels on your GREEN VM runner
    environment: Development
    concurrency:
      group: deploy-green
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR (pull auth)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Write env file for Compose (deploy/.env)
        run: |
          mkdir -p deploy
          : > deploy/.env
          {
            echo TAG=${{ inputs.tag }}
            echo DB_HOST=${{ secrets.DB_HOST }}
            echo DB_PORT=${{ secrets.DB_PORT }}
            echo DB_USER=${{ secrets.DB_USER }}
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            echo DB_NAME=${{ secrets.DB_NAME }}
          } >> deploy/.env

      - name: Deploy on GREEN (with robust health check)
        env:
          COMPOSE_FILE: ${{ env.COMPOSE_FILE }}
        run: |
          set -e
          docker compose --env-file deploy/.env -f "$COMPOSE_FILE" pull
          docker compose --env-file deploy/.env -f "$COMPOSE_FILE" up -d --remove-orphans

          HEALTH_CANDIDATES=(
            "http://localhost/api/health"
            "http://localhost/health"
            "http://localhost:3000/health"
            "http://localhost:3000/api/health"
          )
          echo "Waiting for service to become healthy..."
          for i in {1..30}; do
            for url in "${HEALTH_CANDIDATES[@]}"; do
              if curl -fsS "$url" >/dev/null 2>&1; then
                echo "✅ Health OK at $url"
                exit 0
              fi
            done
            sleep 2
          done

          echo "❌ Health check failed after retries. Recent status & logs:"
          docker compose -f "$COMPOSE_FILE" ps
          docker compose -f "$COMPOSE_FILE" logs --no-color --tail=200
          exit 1

  # Split switch jobs so they aren't skipped when the other color's deploy is skipped
  switch_proxy_to_blue:
    if: ${{ inputs.switch_traffic == 'true' && inputs.color == 'blue' }}
    needs: [deploy_blue]
    runs-on: [self-hosted, proxy]
    steps:
      - name: Switch to BLUE
        run: |
          set -e
          sudo ln -sfn /etc/nginx/upstreams/blue.conf /etc/nginx/upstreams/active.conf
          sudo nginx -t
          sudo systemctl reload nginx
          curl -fsS http://localhost/api/health

  switch_proxy_to_green:
    if: ${{ inputs.switch_traffic == 'true' && inputs.color == 'green' }}
    needs: [deploy_green]
    runs-on: [self-hosted, proxy]
    steps:
      - name: Switch to GREEN
        run: |
          set -e
          sudo ln -sfn /etc/nginx/upstreams/green.conf /etc/nginx/upstreams/active.conf
          sudo nginx -t
          sudo systemctl reload nginx
          curl -fsS http://localhost/api/health
