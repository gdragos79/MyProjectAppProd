name: Deploy (self-hosted, Blue/Green)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Image tag to deploy (e.g., latest or sha7)
        required: true
        default: latest
      color:
        description: Which color to deploy?
        required: true
        default: blue
        type: choice
        options: [blue, green]
      switch_traffic:
        description: Switch proxy to this color after deploy?
        required: true
        default: "false"
        type: choice
        options: ["false", "true"]

permissions:
  contents: read
  packages: read   # allows GHCR pull with GITHUB_TOKEN

env:
  COMPOSE_FILE: deploy/docker-compose.yml
  # Change if your health is on another port/path, e.g. http://localhost:3000/health
  HEALTH_URL: http://localhost/api/health

jobs:
  deploy_blue:
    if: ${{ inputs.color == 'blue' }}
    runs-on: [self-hosted, app-blue]    # labels on your BLUE VM runner
    environment: Development            # reads DB_* secrets from this environment
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR (pull auth)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Write env file for Compose (deploy/.env)
        run: |
          mkdir -p deploy
          : > deploy/.env
          {
            echo TAG=${{ inputs.tag }}
            echo DB_HOST=${{ secrets.DB_HOST }}
            echo DB_PORT=${{ secrets.DB_PORT }}
            echo DB_USER=${{ secrets.DB_USER }}
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            echo DB_NAME=${{ secrets.DB_NAME }}
          } >> deploy/.env

      - name: Deploy on BLUE
        env:
          COMPOSE_FILE: ${{ env.COMPOSE_FILE }}
          HEALTH_URL: ${{ env.HEALTH_URL }}
        run: |
          set -e
          docker compose --env-file deploy/.env -f "$COMPOSE_FILE" pull
          docker compose --env-file deploy/.env -f "$COMPOSE_FILE" up -d --remove-orphans
          sleep 3
          curl -fsS "$HEALTH_URL" || (docker compose -f "$COMPOSE_FILE" logs --no-color --tail=200; exit 1)

  deploy_green:
    if: ${{ inputs.color == 'green' }}
    runs-on: [self-hosted, app-green]   # labels on your GREEN VM runner
    environment: Development
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR (pull auth)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Write env file for Compose (deploy/.env)
        run: |
          mkdir -p deploy
          : > deploy/.env
          {
            echo TAG=${{ inputs.tag }}
            echo DB_HOST=${{ secrets.DB_HOST }}
            echo DB_PORT=${{ secrets.DB_PORT }}
            echo DB_USER=${{ secrets.DB_USER }}
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            echo DB_NAME=${{ secrets.DB_NAME }}
          } >> deploy/.env

      - name: Deploy on GREEN
        env:
          COMPOSE_FILE: ${{ env.COMPOSE_FILE }}
          HEALTH_URL: ${{ env.HEALTH_URL }}
        run: |
          set -e
          docker compose --env-file deploy/.env -f "$COMPOSE_FILE" pull
          docker compose --env-file deploy/.env -f "$COMPOSE_FILE" up -d --remove-orphans
          sleep 3
          curl -fsS "$HEALTH_URL" || (docker compose -f "$COMPOSE_FILE" logs --no-color --tail=200; exit 1)

  switch_proxy:
    if: ${{ inputs.switch_traffic == 'true' }}
    needs: [deploy_blue, deploy_green]
    runs-on: [self-hosted, proxy]       # labels on your Proxy VM runner
    steps:
      - name: Switch upstream & reload Nginx
        run: |
          set -e
          COLOR="${{ inputs.color }}"
          sudo ln -sfn /etc/nginx/upstreams/$COLOR.conf /etc/nginx/upstreams/active.conf
          sudo nginx -t
          sudo systemctl reload nginx
          curl -fsS http://localhost/api/health || (echo "Proxy smoke test failed" >&2; exit 1)
